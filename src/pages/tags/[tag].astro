---
import BaseLayout from "../../layouts/BaseLayout.astro";

import BlogPostListItem from "../../components/BlogPostListItem.astro";
import type { InferGetStaticParamsType, InferGetStaticPropsType, GetStaticPaths, MarkdownInstance } from "astro";

interface BlogFrontmatter {
    title: string;
    author: string;
    pubDate: Date;
    description: string;
    tags: string[];
}

export const getStaticPaths = (async() => {
    const allPosts: MarkdownInstance<BlogFrontmatter>[] = await Astro.glob<BlogFrontmatter>('../posts/*.md');
    const distinctTags: string[] = [...new Set<string>(allPosts.map((p: MarkdownInstance<BlogFrontmatter>) => p.frontmatter.tags).flat())];

    return distinctTags.map(tag => {
        const filteredPosts = allPosts.filter((p: MarkdownInstance<BlogFrontmatter>) => p.frontmatter.tags?.includes(tag));
        return {
            params: { tag: tag },
            props: { posts: filteredPosts }
        };
    })
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { tag } = Astro.params as Params;
const { posts } = Astro.props;
---
<BaseLayout pageTitle={tag}>
    <p>Posts tagged with {tag}</p>
    <ul>
        {posts.map(p => <BlogPostListItem url={p.url} title={p.frontmatter.title}/>)}
    </ul>
</BaseLayout>
